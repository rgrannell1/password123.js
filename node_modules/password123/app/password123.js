
"use strict"




const path          = require('path')
const crypto        = require('crypto')
const readPasswords = require('password123/fs/read-passwords')
const utils         = require('password123/commons/utils')
const constants     = require('password123/commons/constants')





const getPasswordMatch = (useHash, candidate, password) => {

	var match = match = {
		value:   password,
		hash:    '',
		digest:  '',
		isMatch: false
	}


	if (useHash) {

		const hashed = [{
			hash:   '',
			digest: '',
			value:  candidate
		}]

		crypto.getHashes( ).forEach(hash => {

			constants.availableDigests.forEach(digest => {

				var hashedCandidateMatch = crypto.createHash(hash).update(candidate)

				hashed.push({
					hash,
					digest,
					value:    hashedCandidateMatch.digest(digest),
					candidate
				})

			})

		})

		for (var ith = 0; ith < hashed.length; ++ith) {

			if (hashed[ith].value === password) {

				match         = hashed[ith]
				match.isMatch = true
				match.value   = candidate

				break

			}

		}

	} else if (password === candidate) {

		match = {
			value:   password,
			hash:    '',
			digest:  '',
			isMatch: true
		}

	}

	return match

}





const password123 = rawArgs => {

	const args          = password123.preprocess(rawArgs)
	var unusedPasswords = args.passwords

	const fpath         = constants.fpaths.commonPasswords

	readPasswords(fpath, passwordsInterface => {

		passwordsInterface
		.on('line', popularPassword => {

			const matchGroups = utils.partition(
				match => {
					return match.isMatch
				},
				unusedPasswords.map(
					getPasswordMatch.bind({ }, args.hash, popularPassword))
			)

			unusedPasswords = matchGroups.unmatched.map(match => {
				return match.value
			})

			matchGroups.matched.forEach(match => {

				const message = `${match.value}     ${match.isMatch ? 'matched' : 'unmatched'}    ${match.hash}    ${match.digest}`
				console.log(message)

			})

		})
		.on('close', ( ) => {

			unusedPasswords.forEach(password => {

				const message = `${password}    unmatched`
				console.log(message)

			})

		})

	})


}

password123.preprocess = rawArgs => {


	return {
		passwords:    rawArgs['<password>'],
		readSecurely: rawArgs['--secure'],
		hash:         rawArgs['--hash']
	}

}





module.exports = password123
